{"ast":null,"code":"import { of } from \"rxjs\";\nimport { map, mergeMap, catchError } from \"rxjs/operators\";\nimport { createEffect, ofType } from \"@ngrx/effects\";\nimport * as accountActions from \"./actions\";\nexport class AccountStoreEffects {\n  constructor(actions$, accountService) {\n    this.actions$ = actions$;\n    this.accountService = accountService;\n    this.loadAccounts$ = createEffect(() => this.actions$.pipe(ofType(accountActions.AccountActionTypes.LOAD_ACCOUNTS), mergeMap(actions => this.accountService.getAccounts().pipe(map(accounts => new accountActions.LoadAccountsSuccess(accounts.data)), catchError(err => of(new accountActions.LoadAccountsFail(err)))))));\n    this.loadAccount$ = createEffect(() => this.actions$.pipe(ofType(accountActions.AccountActionTypes.LOAD_ACCOUNT), mergeMap(action => this.accountService.getAccountById(action.payload).pipe(map(account => new accountActions.LoadAccountSuccess(account.data)), catchError(err => of(new accountActions.LoadAccountFail(err)))))));\n    this.createAccount$ = createEffect(() => this.actions$.pipe(ofType(accountActions.AccountActionTypes.CREATE_ACCOUNT), map(action => action.payload), mergeMap(account => this.accountService.createAccount(account).pipe(map(newAccount => new accountActions.CreateAccountSuccess(newAccount.data)), catchError(err => of(new accountActions.CreateAccountFail(err)))))));\n    this.updateAccount$ = createEffect(() => this.actions$.pipe(ofType(accountActions.AccountActionTypes.UPDATE_ACCOUNT), map(action => action.payload), mergeMap(account => this.accountService.updateAccount(account).pipe(map(updatedAccount => new accountActions.UpdateAccountSuccess({\n      id: updatedAccount.data.id,\n      changes: updatedAccount\n    })), catchError(err => of(new accountActions.UpdateAccountFail(err)))))));\n    this.deleteAccount$ = createEffect(() => this.actions$.pipe(ofType(accountActions.AccountActionTypes.DELETE_ACCOUNT), map(action => action.payload), mergeMap(id => this.accountService.deleteAccount(id).pipe(map(() => new accountActions.DeleteAccountSuccess(id)), catchError(err => of(new accountActions.DeleteAccountFail(err)))))));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}